// <auto-generated />
using System;
using Benchmark.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Benchmark.Data.Migrations
{
    [DbContext(typeof(BenchmarkDbContext))]
    partial class BenchmarkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.BytePrimaryKeyChildEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte>("ParentId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("BytePrimaryKeyChildEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.BytePrimaryKeyEntity", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("BytePrimaryKeyEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.GuidPrimaryKeyChildEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("GuidPrimaryKeyChildEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.GuidPrimaryKeyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("GuidPrimaryKeyEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.IntPrimaryKeyChildEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("IntPrimaryKeyChildEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.IntPrimaryKeyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("IntPrimaryKeyEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.LongPrimaryKeyChildEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("LongPrimaryKeyChildEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.LongPrimaryKeyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("LongPrimaryKeyEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.ShortPrimaryKeyChildEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<short>("ParentId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ShortPrimaryKeyChildEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.ShortPrimaryKeyEntity", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ShortPrimaryKeyEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.StringPrimaryKeyChildEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("StringPrimaryKeyChildEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.StringPrimaryKeyEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("StringPrimaryKeyEntities");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.BytePrimaryKeyChildEntity", b =>
                {
                    b.HasOne("Benchmark.Data.Entities.KeyTypes.BytePrimaryKeyEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.GuidPrimaryKeyChildEntity", b =>
                {
                    b.HasOne("Benchmark.Data.Entities.KeyTypes.GuidPrimaryKeyEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.IntPrimaryKeyChildEntity", b =>
                {
                    b.HasOne("Benchmark.Data.Entities.KeyTypes.IntPrimaryKeyEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.LongPrimaryKeyChildEntity", b =>
                {
                    b.HasOne("Benchmark.Data.Entities.KeyTypes.LongPrimaryKeyEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.ShortPrimaryKeyChildEntity", b =>
                {
                    b.HasOne("Benchmark.Data.Entities.KeyTypes.ShortPrimaryKeyEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.StringPrimaryKeyChildEntity", b =>
                {
                    b.HasOne("Benchmark.Data.Entities.KeyTypes.StringPrimaryKeyEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.BytePrimaryKeyEntity", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.GuidPrimaryKeyEntity", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.IntPrimaryKeyEntity", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.LongPrimaryKeyEntity", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.ShortPrimaryKeyEntity", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Benchmark.Data.Entities.KeyTypes.StringPrimaryKeyEntity", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
